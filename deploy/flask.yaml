apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"name":"backend"},"name":"flask","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"service":"flask"}},"template":{"metadata":{"labels":{"service":"flask"}},"spec":{"containers":[{"command":["/bin/sh","./entrypoint/start.sh"],"env":[{"name":"BROKER_USER","valueFrom":{"secretKeyRef":{"key":"rabbitmq_user","name":"flask-credentials"}}},{"name":"BROKER_PASS","valueFrom":{"secretKeyRef":{"key":"rabbitmq_pass","name":"flask-credentials"}}},{"name":"USER","valueFrom":{"secretKeyRef":{"key":"user","name":"postgres-credentials"}}},{"name":"PASS","valueFrom":{"secretKeyRef":{"key":"password","name":"postgres-credentials"}}},{"name":"IP","value":"postgres"},{"name":"SECRET_CODE","value":"19941116"},{"name":"DB","valueFrom":{"secretKeyRef":{"key":"user","name":"postgres-credentials"}}},{"name":"CELERY_BROKER_URL","value":"amqp://$(BROKER_USER):$(BROKER_PASS)@rabbitmq-service:5672"},{"name":"ENV","value":"production"}],"image":"docker.pkg.github.com/claudezss/myapi/backend:1.0.4","imagePullPolicy":"Always","name":"flask"}],"imagePullSecrets":[{"name":"dockerconfigjson-github-com"}],"restartPolicy":"Always"}}}}
  creationTimestamp: null
  generation: 1
  labels:
    name: backend
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:kubectl.kubernetes.io/last-applied-configuration: {}
        f:labels:
          .: {}
          f:name: {}
      f:spec:
        f:progressDeadlineSeconds: {}
        f:replicas: {}
        f:revisionHistoryLimit: {}
        f:selector:
          f:matchLabels:
            .: {}
            f:service: {}
        f:strategy:
          f:rollingUpdate:
            .: {}
            f:maxSurge: {}
            f:maxUnavailable: {}
          f:type: {}
        f:template:
          f:metadata:
            f:labels:
              .: {}
              f:service: {}
          f:spec:
            f:containers:
              k:{"name":"flask"}:
                .: {}
                f:command: {}
                f:env:
                  .: {}
                  k:{"name":"BROKER_PASS"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef:
                        .: {}
                        f:key: {}
                        f:name: {}
                  k:{"name":"BROKER_USER"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef:
                        .: {}
                        f:key: {}
                        f:name: {}
                  k:{"name":"CELERY_BROKER_URL"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"DB"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef:
                        .: {}
                        f:key: {}
                        f:name: {}
                  k:{"name":"ENV"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"IP"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"PASS"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef:
                        .: {}
                        f:key: {}
                        f:name: {}
                  k:{"name":"SECRET_CODE"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"USER"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      .: {}
                      f:secretKeyRef:
                        .: {}
                        f:key: {}
                        f:name: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:resources: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
            f:dnsPolicy: {}
            f:imagePullSecrets:
              .: {}
              k:{"name":"dockerconfigjson-github-com"}:
                .: {}
                f:name: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext: {}
            f:terminationGracePeriodSeconds: {}
    manager: kubectl
    operation: Update
    time: "2020-10-19T01:28:58Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:deployment.kubernetes.io/revision: {}
      f:status:
        f:availableReplicas: {}
        f:conditions:
          .: {}
          k:{"type":"Available"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"Progressing"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
        f:observedGeneration: {}
        f:readyReplicas: {}
        f:replicas: {}
        f:updatedReplicas: {}
    manager: kube-controller-manager
    operation: Update
    time: "2020-10-19T01:29:02Z"
  name: flask
  selfLink: /apis/apps/v1/namespaces/default/deployments/flask
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      service: flask
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        service: flask
    spec:
      containers:
      - command:
        - /bin/sh
        - ./entrypoint/start.sh
        env:
        - name: BROKER_USER
          valueFrom:
            secretKeyRef:
              key: rabbitmq_user
              name: flask-credentials
        - name: BROKER_PASS
          valueFrom:
            secretKeyRef:
              key: rabbitmq_pass
              name: flask-credentials
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: postgres-credentials
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              key: password
              name: postgres-credentials
        - name: IP
          value: postgres
        - name: SECRET_CODE
          value: ${{ secrets.GITHUB_TOKEN }}
        - name: DB
          value: postgres
        - name: CELERY_BROKER_URL
          value: amqp://$(BROKER_USER):$(BROKER_PASS)@rabbitmq-service:5672
        - name: ENV
          value: production
        image: docker.pkg.github.com/claudezss/myapi/backend:latest
        imagePullPolicy: Always
        name: flask
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: dockerconfigjson-github-com
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}
